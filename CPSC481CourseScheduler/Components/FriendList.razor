@inject CPSC481CourseScheduler.Services.IFriendService _FriendService;

<div class="standard-card" style="background-color: #ffd16b;">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h4>Compare Schedules</h4>
                <button class="orange-button-1" @onclick="ToggleEditMode">
                @if (IsEditMode)
                {
                    <span>Done</span>
                }
                else
                {
                    <span>Edit</span>
                }
            </button>
        </div>

        <ul class="list-group list-group-flush">
            @foreach (var friend in friends)
            {
                <li class="list-group-item">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" id="@friend.Id" value="@friend.Name" checked="@friend.IsSelected" @onchange="e => SelectFriend(friend, e)">
                            <label class="form-check-label" for="friend-@friend.Id">
                                @friend.Name
                            </label>
                        </div>
                        @if (IsEditMode)
                        {
                            <span class="remove-friend-icon ml-2 cursor-pointer" @onclick="() => RemoveFriend(friend)">
                                <i class="fas fa-times"></i>
                            </span>
                        }
                    </div>
                </li>
            }
        </ul>

        <div class="mt-3 d-flex justify-content-center">
            <button class="orange-button-1" @onclick="() => ShowAddFriendModal()">Add Friend</button>
        </div>


        <Snackbar @ref="finalizeSuccessSnackBar" Color="Blazorise.Snackbar.SnackbarColor.Success" Interval="2000">
            <SnackbarBody>
               The Schedule has been shared successfully!
            </SnackbarBody>
        </Snackbar>
    </div>
</div>


@code {
    private int nextId = 4;
    private bool IsEditMode = false;
    private List<Friend> friends = new List<Friend>();

    protected override async void OnInitialized()
    {
        friends = _FriendService.GetAllFriends();
        _FriendService.OnSelectedFriendChanged += OnSelectedFriendChanged;
        base.OnInitialized();

    }

    private void ToggleEditMode()
    {
        IsEditMode = !IsEditMode;
    }

    private async void OnSelectedFriendChanged(object sender, List<Friend> friends)
    {
        await InvokeAsync(() =>
        {
            friends = _FriendService.GetAllFriends();
            StateHasChanged();
        });
    }

    private async void SelectFriend(Friend selectedFriend, ChangeEventArgs e)
    {
        await _FriendService.SelectFriend(selectedFriend);
    }

    private async void RemoveFriend(Friend friend)
    {
        await _FriendService.RemoveFriend(friend);
    }



    [CascadingParameter] public Blazored.Modal.Services.IModalService Modal { get; set; }
    Snackbar? finalizeSuccessSnackBar;

    private ModalOptions options = new ModalOptions()
        {
            Position = ModalPosition.Middle,
            Size = Blazored.Modal.ModalSize.Large,
            HideCloseButton = true,
            DisableBackgroundCancel = true
        };

    private async Task ShowAddFriendModal()
    {
        var props = new ModalParameters();
        props.Add("friends", friends);
        var modal = Modal.Show<AddFriendModal>("Add Friend", props,options);

        var result = await modal.Result;
        
        if (result.Cancelled)
        {
            Console.WriteLine("Cancelled");
        }
        else if (result.Confirmed)
        {
            Console.WriteLine("Modal was closed");
            await finalizeSuccessSnackBar.Show();
        }
    }
}