@using System.Globalization

<style>
    .table th,
    .table td {
        border-right: 1px solid #ccc;
    }
</style>

<table class="table">
    <thead>
        <tr>
            <th></th>
            <th class="text-center">Monday</th>
            <th class="text-center">Tuesday</th>
            <th class="text-center">Wednesday</th>
            <th class="text-center">Thursday</th>
            <th class="text-center">Friday</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 8; i <= 18; i++)
        {
            <tr>
                <td class="text-center">@FormatTime(i)</td>
                @foreach (DayOfWeek dayOfWeek in Enum.GetValues(typeof(DayOfWeek)))
                {
                    if (dayOfWeek != DayOfWeek.Saturday && dayOfWeek != DayOfWeek.Sunday)
                    {

                        @((MarkupString)GetCourseCell(dayOfWeek, i))
                    }
                    
                }
            </tr>
        }
    </tbody>
</table>

@code {


    public class Course
    {
        public string Name { get; set; } = string.Empty;
        public TimeSpan StartTime { get; set; }
        public TimeSpan EndTime { get; set; }
        public List<DayOfWeek> DaysOfWeek { get; set; }
    }

    private List<Course> Courses = new List<Course>
    {
        new Course { 
            Name = "CPSC 571", 
            StartTime = TimeSpan.FromHours(9).Add(TimeSpan.FromMinutes(30)), 
            EndTime = TimeSpan.FromHours(10).Add(TimeSpan.FromMinutes(45)),
            DaysOfWeek = new List<DayOfWeek>{ DayOfWeek.Tuesday, DayOfWeek.Thursday } 
        },
        new Course { 
            Name = "CPSC 481", 
            StartTime = TimeSpan.FromHours(8),
            EndTime = TimeSpan.FromHours(8).Add(TimeSpan.FromMinutes(50)),
            DaysOfWeek = new List<DayOfWeek>{ DayOfWeek.Monday, DayOfWeek.Wednesday, DayOfWeek.Friday } 
        },
        new Course {
            Name = "SOCI 201", 
            StartTime = TimeSpan.FromHours(13),
            EndTime = TimeSpan.FromHours(14).Add(TimeSpan.FromMinutes(15)), 
            DaysOfWeek = new List<DayOfWeek>{ DayOfWeek.Tuesday, DayOfWeek.Thursday } 
        },
        new Course {
            Name = "CPSC 559",
            StartTime = TimeSpan.FromHours(12),
            EndTime = TimeSpan.FromHours(12).Add(TimeSpan.FromMinutes(50)),
            DaysOfWeek = new List<DayOfWeek>{ DayOfWeek.Monday, DayOfWeek.Wednesday, DayOfWeek.Friday }
        },
    };

    private string FormatTime(int hour)
    {
        if (hour == 12)
            return "12 PM";
        else if (hour > 12)
            return $"{hour - 12} PM";
        else
            return $"{hour} AM";
    }

    private string GetCourseCell(DayOfWeek day, int row)
    {
        StringBuilder sb = new StringBuilder();
        var coursesOnDay = Courses.Where(c => c.DaysOfWeek.Contains(day));

        foreach (var course in coursesOnDay)
        {
            var startRow = (int)course.StartTime.TotalHours;
            var endRow = (int)course.EndTime.TotalHours;

            for (int j = startRow; j <= endRow; j++)
            {
                if (row == j)
                {
                    int rowspan = endRow - startRow + 1;

                    if (j == startRow)
                    {
                        sb.Append($"<td style='background-color: #FFD16B; text-align: center; vertical-align: middle;' rowspan={rowspan}>{course.Name}</td>");
                    }
                    else
                    {
                        sb.Append("<td></td>");
                    }
                    break;
                }
            }
        }

        if (sb.Length == 0)
        {
            sb.Append("<td></td>");
        }
        return sb.ToString();
    }
}