@using System.Globalization
@inject NavigationManager NavigationManager

<style>
    .fa-times {
        color: red;
    }

    .btn:focus, .btn:active {
        outline: none !important;
        box-shadow: none !important;
    }

    .btn:hover {
        transform: scale(1.1);
    }
</style>

<div class="standard-card p-4">
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th class="text-center">Monday</th>
                <th class="text-center">Tuesday</th>
                <th class="text-center">Wednesday</th>
                <th class="text-center">Thursday</th>
                <th class="text-center">Friday</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 8; i <= 18; i++)
            {
                <tr>
                    <td class="text-center">@FormatTime(i)</td>
                    @foreach (DayOfWeek dayOfWeek in Enum.GetValues(typeof(DayOfWeek)))
                    {
                        if (dayOfWeek != DayOfWeek.Saturday && dayOfWeek != DayOfWeek.Sunday)
                        {
                            @((MarkupString)GetCourseCell(dayOfWeek, i))
                        }
                    
                    }
                </tr>
            }
        </tbody>
    </table>
    <div class="d-flex justify-content-center align-items-center">
        @((MarkupString)GetLegend())
    </div>
</div>


@code {
    public class Course
    {
        public string Name { get; set; } = string.Empty;
        public TimeSpan StartTime { get; set; }
        public TimeSpan EndTime { get; set; }
        public List<DayOfWeek> DaysOfWeek { get; set; }
    }

    private List<Course> Courses = new List<Course>
    {
        new Course { 
            Name = "CPSC 571", 
            StartTime = TimeSpan.FromHours(14).Add(TimeSpan.FromMinutes(0)), 
            EndTime = TimeSpan.FromHours(15).Add(TimeSpan.FromMinutes(15)),
            DaysOfWeek = new List<DayOfWeek>{ DayOfWeek.Tuesday, DayOfWeek.Thursday } 
        },
        new Course { 
            Name = "CPSC 513", 
            StartTime = TimeSpan.FromHours(12).Add(TimeSpan.FromMinutes(30)),
            EndTime = TimeSpan.FromHours(13).Add(TimeSpan.FromMinutes(45)),
            DaysOfWeek = new List<DayOfWeek>{ DayOfWeek.Tuesday, DayOfWeek.Thursday } 
        },
        new Course {
            Name = "SOCI 201", 
            StartTime = TimeSpan.FromHours(10),
            EndTime = TimeSpan.FromHours(10).Add(TimeSpan.FromMinutes(50)), 
            DaysOfWeek = new List<DayOfWeek>{ DayOfWeek.Monday, DayOfWeek.Wednesday, DayOfWeek.Friday } 
        },
        new Course {
            Name = "CPSC 583",
            StartTime = TimeSpan.FromHours(14),
            EndTime = TimeSpan.FromHours(14).Add(TimeSpan.FromMinutes(50)),
            DaysOfWeek = new List<DayOfWeek>{ DayOfWeek.Monday, DayOfWeek.Wednesday, DayOfWeek.Friday }
        },
        new Course {
            Name = "GLGY 305",
            StartTime = TimeSpan.FromHours(12),
            EndTime = TimeSpan.FromHours(12).Add(TimeSpan.FromMinutes(50)),
            DaysOfWeek = new List<DayOfWeek>{ DayOfWeek.Monday, DayOfWeek.Wednesday, DayOfWeek.Friday }
        },
    };

    private List<Course> FriendCourses = new List<Course>
    {
        new Course {
            Name = "CPSC 413",
            StartTime = TimeSpan.FromHours(13).Add(TimeSpan.FromMinutes(0)),
            EndTime = TimeSpan.FromHours(13).Add(TimeSpan.FromMinutes(50)),
            DaysOfWeek = new List<DayOfWeek>{ DayOfWeek.Monday, DayOfWeek.Wednesday, DayOfWeek.Friday }
        },
        new Course {
            Name = "CPSC 513",
            StartTime = TimeSpan.FromHours(12).Add(TimeSpan.FromMinutes(30)),
            EndTime = TimeSpan.FromHours(13).Add(TimeSpan.FromMinutes(45)),
            DaysOfWeek = new List<DayOfWeek>{ DayOfWeek.Tuesday, DayOfWeek.Thursday }
        },
        new Course {
            Name = "ASTR 201",
            StartTime = TimeSpan.FromHours(9),
            EndTime = TimeSpan.FromHours(9).Add(TimeSpan.FromMinutes(50)),
            DaysOfWeek = new List<DayOfWeek>{ DayOfWeek.Monday, DayOfWeek.Wednesday, DayOfWeek.Friday }
        }
    };


    private string FormatTime(int hour)
    {
        if (hour == 12)
            return "12 PM";
        else if (hour > 12)
            return $"{hour - 12} PM";
        else
            return $"{hour} AM";
    }

    private string GetCourseCell(DayOfWeek day, int row)
    {
        StringBuilder sb = new StringBuilder();
        var coursesOnDay = Courses.Where(c => c.DaysOfWeek.Contains(day)).ToList();
        

        bool merged = false;
        bool friendCourseAdded = false;
        string[] location = NavigationManager.Uri.Split('/');
        string currentPage = location[location.Length - 1];


        if (currentPage == "share")
        {
            coursesOnDay.AddRange(FriendCourses.Where(c => c.DaysOfWeek.Contains(day)));
        }

        foreach (var course in coursesOnDay)
        {
            var startRow = (int)course.StartTime.TotalHours;
            var endRow = (int)course.EndTime.TotalHours;

            for (int j = startRow; j <= endRow; j++)
            {
                if (row == j)
                {
                    int rowspan = endRow - startRow + 1;
                    string bgColor = "background-color: #FFD16B;";
                    string opacity = "opacity: 1;";

                    if (j == startRow)
                    {
                        if (FriendCourses.Contains(course))
                        {
                            bgColor = "background-color: #64C2A6;";
                            opacity = "opacity: 1;";
                        }

                        if (currentPage == "share")
                        {
                            sb.Append($"<td style='{bgColor} {opacity}; text-align: center; vertical-align: middle; position: relative;' rowspan={rowspan}>{course.Name}</td>");
                        }
                        else
                        {
                            sb.Append($"<td style='background-color: #FFD16B; text-align: center; vertical-align: middle; position: relative;' rowspan={rowspan}>");
                            sb.Append($"{course.Name}<button class='btn btn-x float-end px-2' style='position: absolute; top: 0; right: 0; padding: 0;'><i class='fa fa-times'></i></button></td>");
                        }

                        if (FriendCourses.Any(c => c != course && c.DaysOfWeek.Contains(day) && c.StartTime < course.EndTime && c.EndTime > course.StartTime) && currentPage == "share")
                        {
                            // if there is a friend course that overlaps with this course, set the background color of the existing cell to light blue
                            sb.Replace("#FFD16B", "#BCE5F9");
                        }

                        merged = true;
                        friendCourseAdded = FriendCourses.Contains(course); // set flag to true if friend course is added to cell
                        break; // exit inner loop to prevent additional courses from being added to cell
                    }
                    else
                    {
                        if (!friendCourseAdded && FriendCourses.Any(c => c != course && c.DaysOfWeek.Contains(day) && c.StartTime < course.EndTime && c.EndTime > course.StartTime) && currentPage == "share")
                        {
                            // if there is a friend course that overlaps with this course, set the background color of the existing cell to light blue
                            sb.Replace("#FFD16B", "#BCE5F9");
                        }

                        merged = true;
                        break;
                    }
                }
            }

            if (merged)
            {
                break;
            }
        }

        if (merged)
        {
            return sb.ToString();
        }
        else
        {
            sb.Append("<td></td>");
            return sb.ToString();
        }
    }

    private string GetLegend()
    {
        StringBuilder sb = new StringBuilder();

        // Create a dictionary to store the colors and corresponding course types
        Dictionary<string, string> courseTypes = new Dictionary<string, string>();
        courseTypes.Add("#FFD16B", "My Courses");
        courseTypes.Add("#64C2A6", "Friend Courses");
        courseTypes.Add("#BCE5F9", "Overlapping Courses");

        // Generate the HTML for each course type in the legend
        foreach (var courseType in courseTypes)
        {
            string color = courseType.Key;
            string courseTypeName = courseType.Value;
            sb.Append($"<div style='display: inline-block; margin-right: 5px; background-color: {color}; width: 20px; height: 20px; border-radius: 50%;'></div>");
            sb.Append($"<div style='font-weight:bold; margin-right: 1rem;'>{courseTypeName}</div>");
        }

        // Use the legend HTML in your page
        string legendHtml = sb.ToString();

        return sb.ToString();
    }

}