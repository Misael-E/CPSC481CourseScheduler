@inject CPSC481CourseScheduler.Services.IFriendService _FriendService;

<style>

</style>

<div class="modal-container">
    <div class="d-flex d-flex-row">
        <div class="modal-body w-50 p-4">
            <form>
                <div class="form-group">
                    <label style="font-weight: bold" for="firstName">Name/Nickname</label>
                    <input type="text" class="form-control" id="name" @bind-value="Name">
                </div>
                <div class="form-group">
                    <label style="font-weight: bold" for="email">Email address</label>
                    <input type="email" class="form-control" id="email" @bind-value="Email">
                </div>
            </form>
            <div class="">
                <button type="button" class="orange-button-1" @onclick="AddFriend">Add</button>
                <button type="button" class="white-button-1" @onclick="Cancel">Cancel</button>
            </div>
        </div>

        <div class="standard-card w-25 p-4">
            <h2>Friends</h2>
            <ul class="list-group list-group-flush">
                @foreach (var friend in friends)
                {
                    <li class="list-group-item">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="@friend.Id" value="@friend.Name" checked="@friend.IsSelected" @onchange="e => SelectFriend(friend, e)">
                                <label class="form-check-label" for="friend-@friend.Id">
                                    @friend.Name
                                </label>
                            </div>
                        </div>
                    </li>
                }
            </ul>
            <div class="mt-3 d-flex justify-content-center align-bottom">
                <button class="orange-button-1" @onclick="() => SubmitForm()">Share</button>
            </div>
            <Snackbar @ref="finalizeErrorSnackBar" Color="Blazorise.Snackbar.SnackbarColor.Warning" Interval="2000">
                <SnackbarBody>
                    To Share, select at least one friend from the list.
                </SnackbarBody>
            </Snackbar>
        </div>
    </div>
</div>

@code {
    int nextId = 3;
    private string Name { get; set; }
    private string Email { get; set; }
    private bool select = false;
    Snackbar? finalizeErrorSnackBar;

    private void SelectFriend(Friend friend, ChangeEventArgs e)
    {
        friend.IsSelected = (bool)e.Value;
    }

    private async void AddFriend()
    {
        Friend newFriend = new Friend(nextId++, Name, false);
        await _FriendService.AddFriend(newFriend);
    }

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public List<Friend>? friends { get; set; }


    private async Task SubmitForm() 
    { 
        for(int i=0; i<friends.Count; i++)
        {
            if(friends[i].IsSelected == true)
            {
                select = true;
                break;
            }
        }

        if(select)
        {
            await BlazoredModal.CloseAsync(ModalResult.Ok(true));
        }
        else
        {
            await finalizeErrorSnackBar.Show();
        }
    }
    private async Task Cancel() => await BlazoredModal.CancelAsync();
}
