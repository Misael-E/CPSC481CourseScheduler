@page "/browse"
@inject CPSC481CourseScheduler.Services.ICourseService _CourseService;
<PageTitle>Browsing</PageTitle>

<style>
	
	.searchform {
		display: flex;
		flex-direction: column;
		align-items: center;
		margin: auto;
	}

	.searchform-control {
		width: 500px;
		height: 100px;
	}


	.recommended-courses-title {
		font-weight: bold;
		font-size: 20px;
		padding: .5rem 0 .5rem 1rem;
		border: 3px solid orange;
		border-radius: 8px 8px 0 0;
	}

	.courses-container {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		justify-content: left;
	}

	.courses-container-search {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		justify-content: center;
	}

	.srch-btn {
		margin-top: 10px;
	}

	.search {
		margin-top: 3%;
	}

	.recommended {
		margin-top: 3%;
	}

	.search-results {
		width: 80%;
		background-color: #85C1E9;
		border: 2px solid black;
		border-radius: 5px;
		margin: auto;
	}

	div p {
		text-align: center;
	}

	.add-btn {
		text-align: center;
		margin-bottom: 2%;
	}

	.clear-btn {
		margin-top:1%;
		text-align: center;
	}

	.search-heading {
		border: 3px solid black;
		background-color: #2E86C1;
	}

	.search-heading h3 {
		text-align: center;
	}

	.page-container {
		display: flex;
		flex-direction: row;
		height: calc(100% - 3rem);
	}

	.search-container {
		display: flex;
		flex-direction: column;
	}



	.browse-section-container {
		display: flex;
		flex: 65%;
		flex-direction: column;
		max-height: 90vh;
		overflow: auto;
	}


	.block {
		width: 300px;
		height: 100px;
	}

</style>

<div class="page-container">
	<div class="browse-section-container">
		<form class="flex-row search-bar" onsubmit="@(searchResults)">
			<input class="search-input" type="text" onkeydown="@setSearchInput" placeholder="Search Courses" list="browsers"  aria-label="Search" @bind-value="CurrentSearchValue" @bind-value:event="oninput">
			@if (setSearch)
			{
					<datalist id="browsers">
					@foreach (var course in courses)
					{
						<option value="@course.CourseCode">@course.CourseCode </option>

					}
					</datalist>
			}
			<button class="util-button-1 small-margin-right" type="submit">Search</button>
			@if (searchClicked)
			{
						<button class="white-button-1" type="button" onclick="@(searchResultsOff)">Clear Results</button>
			}
		</form>
		@if(searchClicked)
		{
			@if (checkResult)
			{
				<div class="courses-container-search">
					<CourseCardBasic Course="@coursesFromSearch" showBookmarkButton="true" showSelectCourseButton="true"></CourseCardBasic>
				</div>
			}
			else
			{
				<div>
					<p style="color: red">Course is not found!!</p>
				</div>
			}
		}


		<div class="flex-column standard-card med-top-margin">
			<div class="recommended-courses-title">
					Recommended Courses (Based on degree)
				</div>
				<div class="courses-container">
				@foreach (var course in courses)
				{
					<CourseCardBasic Course="@course" Recommended="true" showBookmarkButton="true" showSelectCourseButton="true"></CourseCardBasic>
				}
			</div>
		</div>
	</div>
	<div class=side-panel-container>
		<SidePanel></SidePanel>
	</div>
</div>

@code {
	private List<Course> courses;
	private bool setSearch = false;
	private bool checkResult;
	private string CurrentSearchValue { get; set; } 


	private void setSearchInput()
	{
		setSearch = true;
	}
	private Course coursesFromSearch;

	private bool searchClicked = false;


	private void searchResults()
	{
		searchClicked = true;

		checkResult = checkSearch();
		if(checkResult)
		{
			setCourseSearchResults();
		}
	}

	private void setCourseSearchResults()
	{
		foreach(var course in courses)
		{
			if(course.CourseCode == CurrentSearchValue)
			{
				coursesFromSearch = new Course
				{
						CourseName = course.CourseName,
						CourseCode = course.CourseCode,
						Description = course.Description,
						Prereq = course.Prereq,
						LectureLocation = course.LectureLocation,
						InstructorName =  course.InstructorName,
						CourseTime =course.CourseTime,
						Seats = course.Seats,
						Days = course.Days,
						LectureNumber = course.LectureNumber,
						Map = course.Map,
						Status = course.Status
				};

				break;
			}
		}
	}

	private bool checkSearch()
	{
		foreach(var course in courses)
		{
			if (course.CourseCode == CurrentSearchValue)
			{
				return true;
			}
		}
		return false;
	}

	private void searchResultsOff()
	{
		searchClicked = false;
		CurrentSearchValue = default;
	}

	protected override void OnInitialized()
	{
		courses = _CourseService.GetRecommendedCourses();
		_CourseService.OnSelectedSemesterChanged += OnSelectedSemesterChanged;
		base.OnInitialized();
	}

	private async void OnSelectedSemesterChanged(object sender, Semester semester)
	{
		await InvokeAsync(() =>
		{
			courses = _CourseService.GetRecommendedCourses();
			StateHasChanged();
		});
	}
}
	