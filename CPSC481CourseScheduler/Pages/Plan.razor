@page "/plan"
@inject CPSC481CourseScheduler.Services.ICourseService _CourseService;
<style>
.map-and-cards {
    display:flex;
    flex-grow: 1;
    }


.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  -webkit-transition: .4s;
  transition: .4s;
}

.slider:before {
  position: absolute;
  content: "";
  height: 20px;
  width: 20px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  -webkit-transition: .4s;
  transition: .4s;
}

input:checked + .slider {
  background-color: #ffd16b;
}

input:focus + .slider {
  box-shadow: 0 0 1px #2196F3;
}

input:checked + .slider:before {
  -webkit-transform: translateX(20px);
  -ms-transform: translateX(20px);
  transform: translateX(20px);
}

.slider.round {
  border-radius: 26px;
}

.slider.round:before {
  border-radius: 50%;
}

.arrow {
  border: solid white;
  border-width: 0 10px 10px 0px;
  display: inline-block;
  padding: 10px;
}

.right {
  transform: rotate(-45deg);
  -webkit-transform: rotate(-45deg);
}

.left {
  transform: rotate(135deg);
  -webkit-transform: rotate(135deg);
}

    .searchform {
        display: flex;
        flex-direction: row;
        align-items: center;
        margin: auto;
        gap: 2%;
    }

    .searchform-control {
        width: 500px;
        height: 100px;
    }


    datalist {
        position: absolute;
        background-color: white;
        border: 1px solid black;
        border-radius: 0 0 5px 5px;
        border-top: none;
        font-family: sans-serif;
        width: 350px;
        padding: 5px;
        max-height: 10rem;
        overflow-y: auto
    }

    .search-bar option {
        background-color: white;
        padding: 4px;
        color: blue;
        margin-bottom: 1px;
        font-size: 18px;
        cursor: pointer;
    }

      option:hover {
            background-color: lightblue;
        }

    .plan-section-container {
        display: flex;
        flex: 65%;
        flex-direction: column;
        max-height: 90vh;
        overflow: auto;
    }

    .bottom-row-container {
        display: flex;
        flex-direction: horizontal;
        justify-content: center;
    }

    .arrow-buttons-container {
        margin-left: auto;
        padding-left: 11rem;
    }

    .schedule-container {
        margin: 0 1rem 1rem 1rem;
    }

    .switch-container {
        font-size: 16px;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        padding-left: 2rem;
    }

    .finalize-button {
        margin-left: auto;
        margin-right: 1rem;
    }
    .switch-title {
        font-weight: bold;
        margin-right: 5px;
        margin-bottom: 5px;
    }
    <!-- toggle -->
    .switch {
      position: relative;
      width: 50px;
      height: 26px;
      margin: 4px 5px .5rem 0;

    }
    .switch input {
        opacity:0;
        width:0;
        height:0;
    }

    .switch-text {
        margin-bottom: 5px;
    }

    .plan-page-container {
        display: flex;
        flex-direction: row;
        height: 100%;
    }

</style>

<div class="page-container">
    <div class="plan-section-container">
        <div class="switch-container container-fluid" style="margin-top: 2%">
            <div class="row" style="width: 100%">
            <div class="col-4">
            <div class="switch-title">Map view</div>
            <label class="switch">
                <input type="checkbox" @onclick="toggleMapViewSwitch">
                <span class="slider round"></span>
            </label>
                    @toggleSwitchText
             </div>
            @if (!mapView)
            {
                <div class="flex justtify-content-center align-items-center pl-5 col-4">
                        <button title="Previous Schedule" class="btn btn-warning" @onclick="() => OnPreviousScheduleClick()"><i class="arrow left" style="margin-top:20%"></i></button>
                        <button title="Next Schedule" class="btn btn-warning" @onclick="() => OnNextScheduleClick()"><i class="arrow right" style="margin-top:20%"></i></button>
                </div>
                <div class="col-4" style="text-align:right; margin: auto">
                <button title="Click for summary of changes" type="button" class="orange-button-1 finalize-button" @onclick="ShowFinalizeModal">FINALIZE SCHEDULE</button>
                </div>
            }
            </div>
        </div>
        <div class="schedule-container">
            @if (mapView)
            {
                <Map />
            }
            else
            {
                <ScheduleTable>

                </ScheduleTable>
            }
        </div>
        <div class="bottom-row-container">
        

        </div>
    </div>
    <div class=side-panel-container>
        <SidePanel></SidePanel>
    </div>
   
</div>

<Snackbar @ref="finalizeSuccessSnackBar" Color="Blazorise.Snackbar.SnackbarColor.Success">
    <SnackbarBody>
        Success!
    </SnackbarBody>
</Snackbar>


@code {
    private bool setSearch = false;
    private bool mapView = false;
    private string toggleSwitchText = "Off";
    string[] lectureNumbers = { "Lec 01", "Lec 02" };
    private int ttrIndex = 0;
    private int numNextButtonPresses = 0;
    private List<Course> courses = new List<Course>();

    List<(TimeSpan, TimeSpan)> mwfTimes = new List<(TimeSpan, TimeSpan)> 
    { 
        (TimeSpan.FromHours(8), TimeSpan.FromHours(8).Add(TimeSpan.FromMinutes(50))),
        (TimeSpan.FromHours(9), TimeSpan.FromHours(8).Add(TimeSpan.FromMinutes(50))),
        (TimeSpan.FromHours(10), TimeSpan.FromHours(8).Add(TimeSpan.FromMinutes(50))),
        (TimeSpan.FromHours(11), TimeSpan.FromHours(8).Add(TimeSpan.FromMinutes(50))),
        (TimeSpan.FromHours(12), TimeSpan.FromHours(8).Add(TimeSpan.FromMinutes(50))),
        (TimeSpan.FromHours(13), TimeSpan.FromHours(8).Add(TimeSpan.FromMinutes(50))),
        (TimeSpan.FromHours(14), TimeSpan.FromHours(8).Add(TimeSpan.FromMinutes(50))),
        (TimeSpan.FromHours(15), TimeSpan.FromHours(8).Add(TimeSpan.FromMinutes(50))),
        (TimeSpan.FromHours(16), TimeSpan.FromHours(8).Add(TimeSpan.FromMinutes(50))),
        (TimeSpan.FromHours(17), TimeSpan.FromHours(8).Add(TimeSpan.FromMinutes(50))),
    };

    List<(TimeSpan, TimeSpan)> ttrTimes = new List<(TimeSpan, TimeSpan)>
    {
        (TimeSpan.FromHours(8), TimeSpan.FromHours(9).Add(TimeSpan.FromMinutes(15))),
        (TimeSpan.FromHours(9).Add(TimeSpan.FromMinutes(30)), TimeSpan.FromHours(10).Add(TimeSpan.FromMinutes(15))),
        (TimeSpan.FromHours(10).Add(TimeSpan.FromMinutes(30)), TimeSpan.FromHours(11).Add(TimeSpan.FromMinutes(15))),
        (TimeSpan.FromHours(11).Add(TimeSpan.FromMinutes(30)), TimeSpan.FromHours(12).Add(TimeSpan.FromMinutes(15))),
        (TimeSpan.FromHours(12).Add(TimeSpan.FromMinutes(30)), TimeSpan.FromHours(13).Add(TimeSpan.FromMinutes(15))),
        (TimeSpan.FromHours(13).Add(TimeSpan.FromMinutes(30)), TimeSpan.FromHours(14).Add(TimeSpan.FromMinutes(15))),
        (TimeSpan.FromHours(14).Add(TimeSpan.FromMinutes(30)), TimeSpan.FromHours(15).Add(TimeSpan.FromMinutes(15))),
        (TimeSpan.FromHours(15).Add(TimeSpan.FromMinutes(30)), TimeSpan.FromHours(16).Add(TimeSpan.FromMinutes(15))),
        (TimeSpan.FromHours(16).Add(TimeSpan.FromMinutes(30)), TimeSpan.FromHours(17).Add(TimeSpan.FromMinutes(15))),
        (TimeSpan.FromHours(17).Add(TimeSpan.FromMinutes(30)), TimeSpan.FromHours(18).Add(TimeSpan.FromMinutes(15))),
    };

    protected override async void OnInitialized()
    {
        courses = _CourseService.GetSelectedCourses();
        base.OnInitialized();
    }


    private void setSearchInput ()
    {
        setSearch = true;
    }

    private void toggleMapViewSwitch()
    {
        mapView = !mapView;
        if (mapView) {
            toggleSwitchText = "On";
        } else
        {
            toggleSwitchText = "Off";
        }
    }

    async private void OnPreviousScheduleClick()
    {
        Console.WriteLine("Previous Schedule");
        if (numNextButtonPresses > 0)
        {
            numNextButtonPresses--;
        }

        Console.WriteLine(numNextButtonPresses);
        UpdateLectureNumberAndTime(false);
        await _CourseService.setSelectedCourses(courses);
    }

    async private void OnNextScheduleClick()
    {
        Console.WriteLine("Next Schedule");

        

        if (numNextButtonPresses < 6)
        {
            numNextButtonPresses++;
            UpdateLectureNumberAndTime(true);
        }
        Console.WriteLine(numNextButtonPresses);
        await _CourseService.setSelectedCourses(courses);
    }

    async private void UpdateLectureNumberAndTime(bool isNext)
    {
        List<Course> newCourses = courses;

        for (var i = 0; i < courses.Count; i++)
        {
            Course currentCourse = newCourses[i];

            // Update lecture number
            if (isNext)
            {
                currentCourse.LectureNumber = currentCourse.LectureNumber == "Lec 01" ? "Lec 02" : "Lec 01";
            }
            else
            {
                currentCourse.LectureNumber = currentCourse.LectureNumber == "Lec 02" ? "Lec 01" : "Lec 02";
            }

            List<(TimeSpan, TimeSpan)> allTimes = currentCourse.Days == "TR" ? ttrTimes : mwfTimes;

            foreach (var scheduledCourse in newCourses)
            {
                if (scheduledCourse == currentCourse)
                {
                    continue;
                }

                var scheduledTimes = scheduledCourse.Days == "TR" ? ttrTimes : mwfTimes;

                allTimes = allTimes.Where(timeSlot =>
                {
                    var overlaps = scheduledTimes.Any(scheduledTimeSlot =>
                    {
                        return scheduledCourse.StartTime < timeSlot.Item2 && scheduledCourse.EndTime > timeSlot.Item1;
                    });

                    return !overlaps;
                }).ToList();
            }

            Random random = new Random();
            int timeIdx = random.Next(0, mwfTimes.Count);

            if (currentCourse.Days == "MWf")
            {
                var newTime = mwfTimes[timeIdx];
                currentCourse.StartTime = newTime.Item1;
                currentCourse.EndTime = newTime.Item2;
            }
            else if (currentCourse.Days == "TR")
            {
                var newTime = ttrTimes[timeIdx];
                currentCourse.StartTime = newTime.Item1;
                currentCourse.EndTime = newTime.Item2;
            }
        }

        await _CourseService.setSelectedCourses(newCourses);

    }

    [CascadingParameter] public Blazored.Modal.Services.IModalService Modal { get; set; }
    Snackbar? finalizeSuccessSnackBar;

    private ModalOptions options = new ModalOptions()
        {
            Position = ModalPosition.Middle,
            Size = Blazored.Modal.ModalSize.Large,
            HideCloseButton = true,
            DisableBackgroundCancel = true
        };

    private async Task ShowFinalizeModal()
    {
        var modal = Modal.Show<FinalizeScheduleModal>("Summary", options);
        var result = await modal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Cancelled");
        } else if (result.Confirmed)
        {
            Console.WriteLine("Modal was closed");
            await finalizeSuccessSnackBar.Show();
        }
    }
}