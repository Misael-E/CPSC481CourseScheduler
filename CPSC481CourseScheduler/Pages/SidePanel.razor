@page "/side-panel"
@inject CPSC481CourseScheduler.Services.ICourseService _CourseService;

<div class="panel-container">
    <div class="side-panel">
        <div class="tab-bar">
            <button class="tab-button left-tab-button @(tab1 ? "active-tab" : "")" @onclick="x=>ActiveTab(1)">
               Selected Courses
            </button>
            <button class="tab-button right-tab-button @(tab2 ? "active-tab" : "")" @onclick="x=>ActiveTab(2)">
              Bookmarks
            </button>
        </div>
        @if (tab1)
        {
            <div class="tab-content">
                @if (IsEmpty(courses))
                {
                    <div class="empty-message">None Selected</div>
                } else
                {
                    @foreach (var course in courses.ToList())
                    {
                        <div class="card border-secondary">
                            <div class="card-header " style="font-size:bold; background-color:#ffd66c;">
                                <div class="container-fluid" style="padding:0">
                                    <div class="row">
                                        <div class="col-auto course-code">
                                            @course.CourseCode

                                        </div>
                                        <div class="col-auto">
                                            @course.CourseName
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body" style="padding-bottom:0">
                                <p class="card-text" style="text-align:left">
                                    <div class="container-fluid" style="padding:0">
                                        <div class="row">
                                            <div class="col-6" style="margin-bottom:1%">
                                                <b>Section: </b>@course.LectureNumber
                                            </div>

                                            <div class="col-6" style="margin-bottom:1%">
                                                <b>Instructor: </b>@course.InstructorName
                                            </div>
                                            <div class="col-6" style="margin-bottom:1%">
                                                <b>Timings:</b> @course.Days @course.CourseTime
                                            </div>
                                            <div class="col-6">
                                                <b>Location: </b>@course.LectureLocation
                                            </div>

                                            <div class="col-6">
                                                <b>Seats: </b>@course.Seats
                                            </div>
                                            <div class="col-6">
                                                <b>Status:  </b>@if (course.Status == "Enrolled")
                                                {
                                                    <p style="display:inline-block"><span class="dot-green"></span> Enrolled</p>
                                                }
                                                @if (course.Status == "Not enrolled")
                                                {
                                                    <p style="display:inline-block"><span class="dot-grey"></span> Not enrolled</p>
                                                }

                                                @if (course.Status == "Waitlisted")
                                                {
                                                    <p style="display:inline-block"><span class="dot-blue"></span> Waitlisted</p>
                                                }

                                            </div>
                                            <div class="action-buttons-container">
                                                <button title="Click to see campus location on map" type="button" class="util-button-1" @onclick="@(() => MapModal(@course.IndividualMap, @course.LectureLocation))">
                                                    Show Location
                                                </button>
                                                <div class="space"></div>
                                                <button class="util-button-1" title="Remove course from selected courses" @onclick="() => RemoveModal(course)"><span class="oi oi-trash" aria-hidden="true"></span></button>
                                                @if (Show)
                                                {
                                                    <div class="modal" tabindex="-1" role="dialog" style="display: @(Show ? "block" : "none")">
                                                        <div class="modal-dialog" role="document">
                                                            <div class="modal-content">
                                                                <div class="modal-header" style="display:flex; justify-content:center">
                                                                    <h5 class="modal-title" >Confirm Dialog</h5>
                                                                </div>
                                                                <div class="modal-body">
                                                                    <p>Are you sure you want to delete the selected course ? </p>
                                                                </div>
                                                                <div class="modal-footer" style="display:flex; justify-content:center">
                                                                    <button type="button" class="btn btn-warning" @onclick="() => RemoveCourse(deleteCourse)">Yes</button>
                                                                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="@(()=> this.Show=false)">No</button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </p>
                            </div>
                        </div>
                    }
                }
            </div>
        }
        @if (tab2)
        {
          <div class="tab-content">
                @if (IsEmpty(Bookmarks))
                {
                    <div class="empty-message">No Bookmarks</div>
                }
                @foreach (var course in Bookmarks.ToList())
                    {
                                <CourseCardBasic Course="course" showBookmarkButton="true" showSelectCourseButton="true" bookmarked="true"></CourseCardBasic>
                
                    }
          </div>
        }
    </div>
    
</div>

<style>
    .action-buttons-container {
        display: flex;
        height: fit-content;
    }
    .space {
        width: 1rem;
        margin: auto;
    }

    .oi-bin {
        background-color: white;
    }
    .course-code {
        font-weight: bold;
    }
    .panel-container {
        display: flex;
        justify-content: center;
        height: 100%;
        padding-top: 2rem;
    }

    .active-tab {
        background-color: white !important;
    }

    .side-panel {
        background-color: white;
        border-radius: 5px;
        width: 100%;
        margin: 0 1rem 1rem 1rem;
        border: 2px solid orange;
        
    }

    .tab-bar {
        display: flex;
        flex-direction: row;
        background-color: orange;
    }

    .tab-button {
        background-color: orange;
        border: none;
        padding: 10px;
        width: 100%;
        font-weight: bold;
        font-size: 14px;
    }
    .left-tab-button {
        border-radius: 5px 0 0 0;
    }

    .right-tab-button {
        border-radius: 0 5px 0 0;
    }

    .tab-content {
        padding: 1rem;
        max-height: calc(100% - 4rem);
        overflow: auto;
    }

    .card {
        padding: 10px;
        margin-bottom: 10px;
        background-color: white;
    }

    .dot-green {
        height: 10px;
        width: 10px;
        background-color: green;
        border-radius: 50%;
        display: inline-block;
    }

    .dot-grey {
        height: 10px;
        width: 10px;
        background-color: grey;
        border-radius: 50%;
        display: inline-block;
    }

    .dot-blue {
        height: 10px;
        width: 10px;
        background-color: deepskyblue;
        border-radius: 50%;
        display: inline-block;
    }

    .empty-message {
        margin-top: 2rem;
        text-align: center;
    }
</style>

@code {
    private bool tab1 = true;
    private bool tab2 = false;
    private int numSelectedCourses = 0;
    private bool Show;
    private Course deleteCourse;

    private List<Course> Bookmarks = new List<Course>();
    private List<Course> courses = new List<Course>();

    public void ActiveTab(int TabNumber)
    {
        switch (TabNumber)
        {
            case 1:
                this.tab1 = true;
                this.tab2 = false;
                break;
            case 2:
                this.tab1 = false;
                this.tab2 = true;
                break;
        }
    }

    public bool IsEmpty(List<Course> list)
    {
        if (list.Count == 0) return true;
        return false;
    }


    protected override async void OnInitialized()
    {
        _CourseService.OnSelectedCoursesChanged += SelectedCoursesChanged;
        _CourseService.OnBookmarksChanged += BookmarksChanged;
        _CourseService.OnSelectedSemesterChanged += OnSelectedSemesterChanged;
        /*BookmarkedCourses = new List<Course> {
        new Course
        {
        CourseName = "Discrete Mathematics ",
        CourseCode = "MATH 271",
        Description = "An introduction to proof techniques and abstract mathematical reasoning: sets, relations and functions; mathematical induction; integers, primes, divisibility and modular arithmetic; counting and combinatorics; elements of probability, discrete random variables and Bayes' theorem."
        },
        new Course
        {
        CourseName = "Principles of Software Design",
        CourseCode = "ENSF 480",
        Description = "Brief overview of typical software development lifecycles. Systematic methods for designing large-scale, quality software. Concepts such as abstraction, modularity, and software modelling will be covered. Designing for non-functional properties of software will be introduced. Emphasis on individual skills."

    }
    };*/
        Bookmarks = _CourseService.GetBookmarks();
        courses = _CourseService.GetSelectedCourses();
        base.OnInitialized();

    }

    private async void OnSelectedSemesterChanged(object sender, Semester semester)
    {
        await InvokeAsync(() =>
        {
            courses = _CourseService.GetSelectedCourses();
            Bookmarks = _CourseService.GetBookmarks();
            StateHasChanged();
        });
    }

    private async void SelectedCoursesChanged(object sender, List<Course> NewSelectedCourses)
    {
        await InvokeAsync(() =>
        {
            ActiveTab(1);
            courses = NewSelectedCourses;
            StateHasChanged();
        });
    }

    private async void BookmarksChanged(object sender, List<Course> NewBookmarks)
    {
        await InvokeAsync(() =>
        {
            Bookmarks = NewBookmarks;
            ActiveTab(2);
            StateHasChanged();
        });
    }

    async private void RemoveCourse(Course course)
    {
        this.Show = false;
        await _CourseService.RemoveFromSelectedCourses(course);
    }



    [CascadingParameter] public Blazored.Modal.Services.IModalService Modal { get; set; }



    private void MapModal(string mapPath, string building)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(IndividualCourseMapModal.Building), building);
        parameters.Add(nameof(IndividualCourseMapModal.Location), mapPath);
        Modal.Show<IndividualCourseMapModal>("Course Location", parameters, options);
    }

    private void RemoveModal(Course course)
    {
        this.Show = true;
        deleteCourse = course;
    }

    private ModalOptions options = new ModalOptions()
        {
            Position = ModalPosition.Middle,
            Size = Blazored.Modal.ModalSize.Large,
            HideCloseButton = true,
            DisableBackgroundCancel = true
        };


}
